@startuml

title __TOWER's Class Diagram__\n

  namespace de.dhbw {
    namespace map.objects.tower {
      abstract class de.dhbw.map.objects.tower.ATower {
          # damage : int
          # headImage : Optional<ImageView>
          - baseImage : ImageView
          - costs : int
          - fireRate : int
          - id : UUID
          - level : int
          - range : int
          - starlvlFour : ImageView
          - starlvlThree : ImageView
          - starlvlTwo : ImageView
          - task : TimerTask
          - x : int
          - y : int
          + ATower()
          + calculateDelay()
          {static} + filterPlaneIfTowerCannotFocus()
          + fire()
          + getBaseImage()
          + getCosts()
          {abstract} + getCosts()
          + getDamage()
          {abstract} + getDamage()
          + getField()
          + getFireRate()
          {abstract} + getFireRate()
          + getHeadImage()
          + getId()
          + getLevel()
          + getNearestEnemy()
          + getPosition()
          + getPositionX()
          + getPositionY()
          + getRange()
          {abstract} + getRange()
          + getStarlvlFour()
          + getStarlvlThree()
          + getStarlvlTwo()
          + getTask()
          + getTowerType()
          + isEnemyInRange()
          + rotateImage()
          + setBaseImage()
          + setHeadImage()
          + setTask()
          # getFocusableEnemies()
      }
    }
  }
  

  namespace de.dhbw {
    namespace map.objects.tower {
      class de.dhbw.map.objects.tower.TowerArtillery {
          - artilleryTowerImage : ImageView
          + TowerArtillery()
          + TowerArtillery()
          + fire()
          + getCosts()
          + getDamage()
          + getFireRate()
          + getRange()
          {static} + getTowerArtilleryCostsByLevel()
          {static} - getTowerArtilleryDamageByLevel()
          {static} - getTowerArtilleryFirerateByLevel()
          {static} - getTowerArtilleryRangeByLevel()
      }
    }
  }
  

  namespace de.dhbw {
    namespace map.objects.tower {
      class de.dhbw.map.objects.tower.TowerBoombastic {
          + TowerBoombastic()
          + TowerBoombastic()
          + fire()
          + getCosts()
          + getDamage()
          + getFireRate()
          + getRange()
          {static} + getTowerBoombasticCostsByLevel()
          {static} - getTowerBoombasticDamageByLevel()
          {static} - getTowerBoombasticFirerateByLevel()
          {static} - getTowerBoombasticRangeByLevel()
      }
    }
  }
  

  namespace de.dhbw {
    namespace map.objects.tower {
      class de.dhbw.map.objects.tower.TowerFreezer {
          - slowness : int
          + TowerFreezer()
          + TowerFreezer()
          + fire()
          + getCosts()
          + getDamage()
          + getFireRate()
          {static} + getFreezerCostsByLevel()
          + getRange()
          + getSlowness()
          {static} - getFreezerDamageByLevel()
          {static} - getFreezerFirerateByLevel()
          {static} - getFreezerRangeByLevel()
          {static} - getFreezerSlownessByLevel()
      }
    }
  }
  

  namespace de.dhbw {
    namespace map.objects.tower {
      class de.dhbw.map.objects.tower.TowerLaser {
          + TowerLaser()
          + fire()
          + getCosts()
          + getDamage()
          + getFireRate()
          + getRange()
          + removeBullet()
          {static} - getLaserCostsByLevel()
          {static} - getLaserDamageByLevel()
          {static} - getLaserFireRateByLevel()
          {static} - getLaserRangeByLevel()
      }
    }
  }
  

  namespace de.dhbw {
    namespace map.objects.tower {
      class de.dhbw.map.objects.tower.TowerPlasmarizer {
          - plasmaRange : int
          + TowerPlasmarizer()
          + fire()
          + getCosts()
          + getDamage()
          + getFireRate()
          + getRange()
          {static} - getPlasmarizerCostsByLevel()
          {static} - getPlasmarizerDamageByLevel()
          {static} - getPlasmarizerFirerateByLevel()
          {static} - getPlasmarizerRangeByLevel()
      }
    }
  }
  

  namespace de.dhbw {
    namespace map.objects.tower {
      enum TowerType {
        ARTILLERY
        ASSAULTLASER
        BOOMBASTIC
        FREEZER
        PLASMARIZER
        drawable
        price
        type
      }
    }
  }
  

  de.dhbw.map.objects.tower.ATower -up-|> de.dhbw.game.ATimerUsage
  de.dhbw.map.objects.tower.ATower o-- de.dhbw.activities.GameActivity : gameActivity
  de.dhbw.map.objects.tower.ATower o-- de.dhbw.map.objects.enemy.AEnemy : targetedEnemy
  de.dhbw.map.objects.tower.ATower o-- de.dhbw.map.structure.Field : field
  de.dhbw.map.objects.tower.ATower o-- de.dhbw.map.objects.tower.TowerType : towerType
  de.dhbw.map.objects.tower.TowerArtillery -up-|> de.dhbw.map.objects.tower.ATower
  de.dhbw.map.objects.tower.TowerBoombastic -up-|> de.dhbw.map.objects.tower.ATower
  de.dhbw.map.objects.tower.TowerFreezer -up-|> de.dhbw.map.objects.tower.ATower
  de.dhbw.map.objects.tower.TowerLaser -up-|> de.dhbw.map.objects.tower.ATower
  de.dhbw.map.objects.tower.TowerLaser o-- de.dhbw.map.objects.bullet.LaserRay : bullet
  de.dhbw.map.objects.tower.TowerPlasmarizer -up-|> de.dhbw.map.objects.tower.ATower


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
